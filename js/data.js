// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
let data = {
    '2024': {
        '–Ø–Ω–≤–∞—Ä—å': {
            'SPOT': { trades: [] },
            'FUTURES': { trades: [] },
            'DeFi': { trades: [] }
        }
    }
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
function loadData() {
    const savedData = localStorage.getItem('cryptoSharksData');
    if (savedData) {
        data = JSON.parse(savedData);
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
function saveData() {
    localStorage.setItem('cryptoSharksData', JSON.stringify(data));
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–¥–µ–ª–æ–∫
function parseTrades(text) {
    const lines = text.split('\n').filter(line => line.trim());
    let currentCategory = '';
    let trades = [];
    
    lines.forEach(line => {
        // –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        const cleanLine = line.trim().replace(/["""'']/g, '');

        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤)
        if (cleanLine.match(/DEFI|–î–ï–§–ò|DEFI:|–î–ï–§–ò:|DEFIüöÄ|DEFI */i)) {
            currentCategory = 'DeFi';
            return;
        } else if (cleanLine.match(/FUTURES|–§–¨–Æ–ß–ï–†–°|FUTURES:|–§–¨–Æ–ß–ï–†–°:|FUTURESüöÄ/i)) {
            currentCategory = 'FUTURES';
            return;
        } else if (cleanLine.match(/SPOT|–°–ü–û–¢|SPOT:|–°–ü–û–¢:|SPOTüöÄ/i)) {
            currentCategory = 'SPOT';
            return;
        }

        // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∑–∞–ø–∏—Å–∏ —Å–¥–µ–ª–æ–∫
        const patterns = [
            // #BTC +50% –∏–ª–∏ #BTC -30%
            /[#]?(\w+)\s*([-+])\s*(\d+\.?\d*)%\s*(?:\((\d+)x\)?)?/i,
            
            // BTC +50% –∏–ª–∏ BTC -30%
            /(\w+)\s*([-+])\s*(\d+\.?\d*)%\s*(?:\((\d+)x\)?)?/i,
            
            // 1. BTC +50% –∏–ª–∏ 1) BTC -30%
            /(?:\d+[\.)]\s*)[#]?(\w+)\s*([-+])\s*(\d+\.?\d*)%\s*(?:\((\d+)x\)?)?/i,
            
            // BTC - +50% –∏–ª–∏ BTC . -30%
            /(\w+)\s*[-\.]\s*([-+])\s*(\d+\.?\d*)%\s*(?:\((\d+)x\)?)?/i,
            
            // BTC+50% –∏–ª–∏ BTC-30%
            /(\w+)([-+])(\d+\.?\d*)%\s*(?:\((\d+)x\)?)?/i,
            
            // –û–±—â–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —á–∏—Å–µ–ª –∏ —Å–∏–º–≤–æ–ª–æ–≤
            /(\w+)[^\w\s]*\s*([-+])?(\d+\.?\d*)%\s*(?:\((\d+)x\)?)?/i
        ];

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        let matched = false;
        for (const pattern of patterns) {
            const match = cleanLine.match(pattern);
            if (match && currentCategory) {
                const [_, symbol, sign, value, leverage] = match;
                let result = parseFloat(value);
                result = (sign === '-' || cleanLine.includes('-')) ? -result : result;
                
                // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                const cleanSymbol = symbol.replace(/[^A-Za-z0-9]/g, '');
                
                trades.push({
                    id: Date.now() + Math.random(),
                    pair: cleanSymbol,
                    result: result,
                    leverage: leverage || '',
                    status: result > 0 ? 'profit' : 'loss',
                    category: currentCategory,
                    timestamp: new Date().toISOString()
                });
                matched = true;
                break;
            }
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ—Å–æ–±—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        if (!matched && currentCategory && cleanLine.length > 0) {
            // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –ª—é–±—ã–µ —á–∏—Å–ª–∞ –∏ —Å–∏–º–≤–æ–ª—ã
            const numberMatch = cleanLine.match(/(\d+\.?\d*)/);
            const symbolMatch = cleanLine.match(/([A-Za-z]+)/);
            
            if (numberMatch && symbolMatch) {
                const value = parseFloat(numberMatch[1]);
                const symbol = symbolMatch[1];
                
                trades.push({
                    id: Date.now() + Math.random(),
                    pair: symbol,
                    result: value,
                    leverage: '',
                    status: value > 0 ? 'profit' : 'loss',
                    category: currentCategory,
                    timestamp: new Date().toISOString()
                });
            }
        }
    });

    return trades;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫
function addTradeData(year, month, category, trades) {
    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!data[year]) data[year] = {};
    if (!data[year][month]) data[year][month] = {};
    if (!data[year][month][category]) data[year][month][category] = { trades: [] };

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–¥–µ–ª–∫–∏
    if (Array.isArray(trades)) {
        data[year][month][category].trades.push(...trades);
    } else {
        data[year][month][category].trades.push(trades);
    }
    
    saveData();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–¥–µ–ª–∫–∏
function updateTradeData(year, month, category, tradeId, updatedData) {
    if (data[year]?.[month]?.[category]) {
        const trades = data[year][month][category].trades;
        const index = trades.findIndex(t => t.id === tradeId);
        
        if (index !== -1) {
            trades[index] = { ...trades[index], ...updatedData };
            saveData();
            return true;
        }
    }
    return false;
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
function deleteTradeData(year, month, category, tradeId) {
    if (data[year]?.[month]?.[category]) {
        const trades = data[year][month][category].trades;
        data[year][month][category].trades = trades.filter(t => t.id !== tradeId);
        saveData();
        return true;
    }
    return false;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥
function getPeriodData(year, month, category) {
    return data[year]?.[month]?.[category]?.trades || [];
}

// –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function calculateStats(trades) {
    let totalProfit = 0;
    let totalLoss = 0;
    let profitCount = 0;
    let lossCount = 0;
    
    trades.forEach(trade => {
        if (trade.result > 0) {
            totalProfit += trade.result;
            profitCount++;
        } else if (trade.result < 0) {
            totalLoss += Math.abs(trade.result);
            lossCount++;
        }
    });

    return {
        totalTrades: trades.length,
        profitTrades: profitCount,
        lossTrades: lossCount,
        totalProfit: totalProfit.toFixed(1),
        totalLoss: totalLoss.toFixed(1),
        winRate: trades.length > 0 ? ((profitCount / trades.length) * 100).toFixed(1) : 0
    };
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
function exportData() {
    return {
        data: JSON.stringify(data),
        timestamp: new Date().toISOString()
    };
}

// –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
function importData(jsonData) {
    try {
        const importedData = JSON.parse(jsonData);
        data = importedData;
        saveData();
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
        return false;
    }
}

// –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥
function clearPeriodData(year, month, category) {
    if (data[year]?.[month]?.[category]) {
        data[year][month][category].trades = [];
        saveData();
        return true;
    }
    return false;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', loadData);
