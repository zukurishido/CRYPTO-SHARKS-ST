// –ü–∞—Ä—Å–∏–Ω–≥ —Å–¥–µ–ª–æ–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
function parseTrades(text) {
    const lines = text.split('\n').filter(line => line.trim());
    let currentCategory = '';
    let trades = [];
    
    lines.forEach(line => {
        // –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        const cleanLine = line.trim().replace(/["""'']/g, '');

        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ –¥–æ–ø. —Å–∏–º–≤–æ–ª–∞–º)
        if (cleanLine.match(/DEFI|–î–ï–§–ò|DEFI:|–î–ï–§–ò:|DEFIüöÄ|DEFI */i)) {
            currentCategory = 'DeFi';
            return;
        } else if (cleanLine.match(/FUTURES|–§–¨–Æ–ß–ï–†–°|FUTURES:|–§–¨–Æ–ß–ï–†–°:|FUTURESüöÄ/i)) {
            currentCategory = 'FUTURES';
            return;
        } else if (cleanLine.match(/SPOT|–°–ü–û–¢|SPOT:|–°–ü–û–¢:|SPOTüöÄ/i)) {
            currentCategory = 'SPOT';
            return;
        }

        // –†–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å–¥–µ–ª–æ–∫
        const patterns = [
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: #BTC +50% –∏–ª–∏ #BTC -30%
            /[#]?(\w+)\s*([-+])\s*(\d+\.?\d*)%\s*(?:\((\d+)x\)?)?/i,
            
            // –§–æ—Ä–º–∞—Ç –±–µ–∑ #: BTC +50% –∏–ª–∏ BTC -30%
            /(\w+)\s*([-+])\s*(\d+\.?\d*)%\s*(?:\((\d+)x\)?)?/i,
            
            // –§–æ—Ä–º–∞—Ç —Å –Ω–æ–º–µ—Ä–æ–º: 1. BTC +50% –∏–ª–∏ 1) BTC -30%
            /(?:\d+[\.)]\s*)[#]?(\w+)\s*([-+])\s*(\d+\.?\d*)%\s*(?:\((\d+)x\)?)?/i,
            
            // –§–æ—Ä–º–∞—Ç —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å –∏–ª–∏ —Ç–æ—á–∫—É: BTC - +50% –∏–ª–∏ BTC . -30%
            /(\w+)\s*[-\.]\s*([-+])\s*(\d+\.?\d*)%\s*(?:\((\d+)x\)?)?/i,
            
            // –§–æ—Ä–º–∞—Ç –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤: BTC+50% –∏–ª–∏ BTC-30%
            /(\w+)([-+])(\d+\.?\d*)%\s*(?:\((\d+)x\)?)?/i
        ];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        let matched = false;
        for (const pattern of patterns) {
            const match = cleanLine.match(pattern);
            if (match && currentCategory) {
                const [_, symbol, sign, value, leverage] = match;
                const result = (sign === '+' ? 1 : -1) * parseFloat(value);
                
                // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                const cleanSymbol = symbol.replace(/[^A-Za-z0-9]/g, '');
                
                trades.push({
                    id: Date.now() + Math.random(),
                    pair: cleanSymbol,
                    result: result,
                    leverage: leverage || '',
                    status: result > 0 ? 'profit' : 'loss',
                    category: currentCategory,
                    timestamp: new Date().toISOString()
                });
                matched = true;
                break;
            }
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ—Å–æ–±—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        if (!matched && currentCategory) {
            // –§–æ—Ä–º–∞—Ç "–ø–∞—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç": BTC 50% –∏–ª–∏ BTC 30%
            const simpleMatch = cleanLine.match(/(\w+)\s+(\d+\.?\d*)%/i);
            if (simpleMatch) {
                const [_, symbol, value] = simpleMatch;
                trades.push({
                    id: Date.now() + Math.random(),
                    pair: symbol.replace(/[^A-Za-z0-9]/g, ''),
                    result: parseFloat(value),
                    leverage: '',
                    status: parseFloat(value) > 0 ? 'profit' : 'loss',
                    category: currentCategory,
                    timestamp: new Date().toISOString()
                });
            }
        }
    });

    return trades;
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
function testParsing(text) {
    const trades = parseTrades(text);
    console.log('–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏:', trades);
    return trades.length > 0;
}

// –ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–ø–µ—Ä—å —Ä–∞—Å–ø–æ–∑–Ω–∞—é—Ç—Å—è:
/*
DEFI:
#BTC +50%
BTC -30%
1. ETH +25%
2) SOL -15%
BTC - +40%
ETH . -20%
DOT+35%
AVAX-25%
BNB 45%

FUTURES:
#BTC +50% (10x)
BTC -30% (5x)
1. ETH +25% (3x)
2) SOL -15% (2x)

SPOT:
#BTC +50%
BTC -30%
*/
