// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
window.isAuthenticated = false;
let isAdminPanelVisible = false;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function initializeAdminPanel() {
    const adminButton = document.getElementById('adminButton');
    const closeAdmin = document.getElementById('closeAdmin');

    adminButton.addEventListener('click', () => {
        if (!window.isAuthenticated) {
            showLoginForm();
        } else {
            toggleAdminPanel();
        }
    });

    closeAdmin.addEventListener('click', () => {
        toggleAdminPanel();
    });
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function toggleAdminPanel() {
    const adminPanel = document.getElementById('adminPanel');
    isAdminPanelVisible = !isAdminPanelVisible;
    adminPanel.classList.toggle('visible');
    
    if (isAdminPanelVisible && window.isAuthenticated) {
        showBulkInput();
    }
}

// –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
function showLoginForm() {
    const form = document.querySelector('.admin-form');
    form.innerHTML = `
        <div class="input-group">
            <input type="password" 
                   id="passwordInput" 
                   placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å" 
                   class="admin-input"
                   onkeypress="if(event.key === 'Enter') login()">
            <button onclick="login()" class="add-btn">–í–æ–π—Ç–∏</button>
        </div>
    `;
    
    toggleAdminPanel();
}

// –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
function login() {
    const password = document.getElementById('passwordInput').value;
    // –ó–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å "Cr5pt0Sh@rks2024#AdminP@nel"
    const validHash = "Q3I1cHQwU2hAcmtzMjAyNCNBZG1pblBAb" + "mVs";
    
    if (btoa(password) === validHash) {
        window.isAuthenticated = true;
        showBulkInput();
        showNotification('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥', 'success');
    } else {
        showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å', 'error');
    }
}

// –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
function showBulkInput() {
    document.querySelector('.admin-form').innerHTML = `
        <div class="input-group">
            <label>–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫</label>
            <textarea id="bulkInput" placeholder="DEFI:üöÄ
1.#FIT +20%
2.#AMT +22%

FUTURES:üöÄ
1.#BNB +35% (5—Ö)
2.#CELO +76% (20—Ö)

SPOT:üöÄ
1.#TWT +35%
2.#NEAR -15%"></textarea>
            <button onclick="processBulkTrades()" class="add-btn">–î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫–∏</button>
        </div>
    `;
    updateModeBtns('bulk');
}

// –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
function showRegularForm() {
    document.querySelector('.admin-form').innerHTML = `
        <div class="input-group">
            <label>–ü–∞—Ä–∞</label>
            <input type="text" id="pairInput" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: BTC">
        </div>
        <div class="input-group">
            <label>–†–µ–∑—É–ª—å—Ç–∞—Ç (%)</label>
            <input type="number" id="resultInput" step="0.01">
        </div>
        <div class="input-group">
            <label>–ö—Ä–∞—Ç–Ω–æ—Å—Ç—å (–¥–ª—è FUTURES)</label>
            <input type="text" id="leverageInput" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 20x">
        </div>
        <button onclick="processSingleTrade()" class="add-btn">–î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É</button>
    `;
    updateModeBtns('single');
}

// –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
function showTradesList() {
    const year = document.getElementById('yearSelect').value;
    const month = document.getElementById('monthSelect').value;
    const category = document.getElementById('categorySelect').value;
    
    const trades = getPeriodData(year, month, category);
    let html = '<div class="trades-list">';
    
    if (trades.length === 0) {
        html += '<p>–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</p>';
    } else {
        trades.forEach((trade) => {
            html += `
                <div class="trade-item ${trade.status}">
                    <div class="trade-content">
                        <div class="trade-pair">#${trade.pair}</div>
                        <div class="trade-result">
                            ${trade.result > 0 ? '+' : ''}${trade.result}% 
                            ${trade.leverage ? `(${trade.leverage})` : ''}
                        </div>
                    </div>
                    <div class="trade-actions">
                        <button onclick="confirmDelete('${trade.id}')" class="delete-btn">–£–¥–∞–ª–∏—Ç—å</button>
                    </div>
                </div>
            `;
        });
    }
    
    html += '</div>';
    document.querySelector('.admin-form').innerHTML = html;
    updateModeBtns('manage');
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
function confirmDelete(tradeId) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å–¥–µ–ª–∫—É?')) {
        const year = document.getElementById('yearSelect').value;
        const month = document.getElementById('monthSelect').value;
        const category = document.getElementById('categorySelect').value;

        if (deleteTradeData(year, month, category, tradeId)) {
            showNotification('–°–¥–µ–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞', 'success');
            showTradesList();
            updateContent();
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
function processBulkTrades() {
    const text = document.getElementById('bulkInput').value;
    const trades = parseTrades(text);
    
    if (trades.length === 0) {
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–¥–µ–ª–∫–∏', 'error');
        return;
    }

    const year = document.getElementById('yearSelect').value;
    const month = document.getElementById('monthSelect').value;
    const category = document.getElementById('categorySelect').value;

    if (addTradeData(year, month, category, trades)) {
        document.getElementById('bulkInput').value = '';
        showNotification(`–î–æ–±–∞–≤–ª–µ–Ω–æ ${trades.length} —Å–¥–µ–ª–æ–∫`, 'success');
        updateContent();
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
function processSingleTrade() {
    const pair = document.getElementById('pairInput').value;
    const result = parseFloat(document.getElementById('resultInput').value);
    const leverage = document.getElementById('leverageInput').value;

    if (!pair || isNaN(result)) {
        showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error');
        return;
    }

    const trade = {
        id: Date.now(),
        pair: pair,
        result: result,
        leverage: leverage ? leverage : '',
        status: result > 0 ? 'profit' : 'loss'
    };

    const year = document.getElementById('yearSelect').value;
    const month = document.getElementById('monthSelect').value;
    const category = document.getElementById('categorySelect').value;

    if (addTradeData(year, month, category, trade)) {
        // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
        document.getElementById('pairInput').value = '';
        document.getElementById('resultInput').value = '';
        document.getElementById('leverageInput').value = '';
        
        showNotification('–°–¥–µ–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', 'success');
        updateContent();
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ —Ä–µ–∂–∏–º–∞
function updateModeBtns(activeMode) {
    const btns = document.querySelectorAll('.mode-btn');
    btns.forEach(btn => {
        if (btn.getAttribute('onclick').includes(activeMode)) {
            btn.classList.add('active');
        } else {
            btn.classList.remove('active');
        }
    });
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'success') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);

    setTimeout(() => {
        notification.remove();
    }, 3000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', initializeAdminPanel);
